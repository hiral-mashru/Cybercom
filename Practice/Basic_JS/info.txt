** an interpreter in the browser reads over the JavaScript code, interprets each 
   line, and runs it.
   
** JS -> inline
-> After body part(it's easy to load page from browser), use <script></script>

** to write down in console in browser
-> console.log('');

** JS -> external
-> create xyz.js file and write JS code there and in html file, write 
   <script src="xyz.js></script>

** JS 
-> lightweight(doesn't need much memory of computer and relatively simple syntax), 
   cross-platform (used in multiple platforms) object oriented (JS based on object).

** Three core languages in web development : HTML(for content like text, images, 
   etc..), CSS(presentation, styling), JS (dynamic effects, programming)

** JS in client-side : traditionally used in browser. To make pages attractive, 
   dynamic effects, interactivity,modern web application

** JS in server side : NodeJS.

** JS version: ES5,ES6(2015),ES7(2016), ES8(2017)

** ';' is not important

** case sensitive

** 5 Data-types - JS has dynamic typing (datatypes automatically assigned to variables)
1) Number : float, decimal, integer
2) String : sequence of chars, used for text
3) Boolean : Logical data-type, true or false
4) Undefined : Varible that doesn't have a value yet
5) Null : non-existent
** use Camel words in JS 
** can't start variable names with numbers or symbols except $ and _
** can't use reserved js words as a variableName

** comments -> '//' one line comment, '/* */' multi line comments

** Oprtator Precedence
-> ()  >  !..,++..,--..(right to left)  >  **(right to left)  >  *,/,%  >  +,-  >
  <<,>>,<<<  >  <,<=,>,>=,instanceof  >  ==,!=  >  &  >  ^  >  |  >  &&  >  ||  >
  ..?..:..(right to left)  >  =,+=,-=,**=,*=,/=,etc..(right to left)  >  

  ** Boolean Logic 
  -> AND && => true if all are true
  -> OR || => rue if one is true
  -> NOT ! => inverts true/false value

  ** Falsy values: Undefined,null,0,'',NaN
  ** Truthy values: NOT falsy values
  ** == -> values muxt be same
  -> eg. : 23 == '23' => 'true'
  ** === -> values and datatypes must be same 
  -> eg. : 23 === '23' => false
  
  ** functions are for reuse block of code

  ** Arrays are collection of objects/values of same/different datatypes

  ** Variable mutation means u can change the value of variable

  ** Type conversion means JS can automatically change the type of variable 
     like console.log(str+number)

  ** var declarations are globally scoped or function scoped while let and const 
     are block scoped. var variables can be updated and re-declared within its 
     scope; let variables can be updated but not re-declared; const variables can 
     neither be updated nor re-declared. They are all hoisted to the top of their 
     scope.
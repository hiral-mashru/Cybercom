rm -rf .git
git init
git add .
git commit -m "/*anything*/"
git remote add origin /*URL*/
git push -f origin master


-------------------------------------------------------
https://www.atlassian.com/git/glossary
https://www.youtube.com/watch?v=gwWKnnCMQ5c
-------------------------------------------------------

->Generate SSH key: it's used as password. For pull or push request, it's used.

-ssh-keygen -t rsa -C "username or email"
-cat ~/.ssh/id_rsa.pub
-Now goto https://github.com/settings/ssh/new to add SSH key. Past your key and click on “Add SSH key” 

---> My SSH Key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCxPAKy5paF+iQ4vwlD76PKwW2Q4BbMQIaA7SOFNigjLg4AhFHsu9KK0sA1144ZkiXm3+0EfLkL/xhXBn6eYQLb2qDweyxJRTDVqHuoytyP3S+dknE1JvjHbFvR5SmY1KOPTxzMZmslyGGjSdib3Y4VCRCNzQdHvizDHCDbtlTTnbP3Cs/vI3eHJKxDsQ0G+us4aW+Cq9vIW4XEdg4VA0HNvRm0OFEimH2kjz4svy1SDBNV2IVeyGgAM0WYgBmBGOrfeT/2mDclGyeyVBU0Adt7zMuDFIYNRqSgXQmVikws8jqTWNVnUmNBcVK3MGUUyeN1ulyfYL7XISs5CUAw+jECMFmscd/nyKc2+V8mnYKStXcQw5T3iv3z0XonmiAiZVGhu06F/LJ8MaPfEM3g5zitLI2YCQTxKWlWE6r7bppfNtM6gsP3HKnAfvPy7bZ5VjrxzuK43+Y684tLXUEd0ySDmg+s6fNaX5JEFATEM4JD/DTMLVYgEyFrvR18WWorclk= hiral-mashru


---------------------------------------------------------------
//to upload your project in github in particular branch

- create new repo in github

- Go to folder and go to Git Bash

- mkdir example

- git clone /*url*/ repository/

- cd repository

- git remote -v //check nickname of ur repo

- git fetch origin //to fetch latest update, it adds to .git folder in local system

- git checkout -b newBranch origin/main //to create new branch, 'main' is default branch

- git status //to check modified or new files

- git add . //it makes changed file staging

(A staging step in git allows you to continue making changes to the working directory, and when you decide you wanna interact with version control, it allows you to record changes in small commits.)

- git commit -m "add" //it changes in local .git repository

(- git commit -a => git add . + git commit -m "")

- git push origin newBranch //push files/folders to the particular branch, it changes the remote repo, to add new file or folder in github from local system

//added folders/files to particular branch in github.

--------------------------------------------------------------------------------
//to merge branches

- git checkout main //to switch the branch

- git fetch origin

- git merge --no-ff origin/newBranch //ff=fast forward,use of --no-ff is to merge all the files/folders and then push them.
/* ':q' to come out from vim editor */

--------------------------------------------------------------------------------
//get some folders/files (that are not in local system) from github to local system

- git pull origin newBranch //write it in 'main' branch

- query : in newBranch if I write this command then it won't gonna work. why? 

-----------------------------------------------------------------------------------
<<<<<<< HEAD
- staging and unstaging : Untracked changes are not in Git. Unstaged changes are in Git but not marked for commit. Staged changes are in Git and marked for commit.

=======
-staging and unstaging : Untracked changes are not in Git. Unstaged changes are in Git but not marked for commit. Staged changes are in Git and marked for commit.  
>>>>>>> 0dd28403dc841ce130ebcb97d21583e7f3eb8542
------------------------------------------------------------------------------------------------

//upload updated things into github

- git pull origin (branchName)

- git push origin (branchName)
<<<<<<< HEAD

----------------------------------------------------------------------------------------------------

- git fetch : Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to
inspect changes before merging them with your project.

- git pull : Pulling is the automated version of git fetch. It downloads a branch from a remote repository, 
then immediately merges it into the current branch. This is the Git equivalent of svn update.

- git stash : git stash temporarily shelves (or stashes) changes you've made to your working copy so you can work on something else, and then come back and re-apply them later on.

----------------------------------------------------------------------------------------------

// create new file in git.

- git status //new file is untracked file.

- git add . //it will add new file to staged area

- git status //new file is going to commit

- git restore --staged newFile //it will take new file from the staged area.

- git status //new file is untracked file.

- git commit //it will open vim editor, press i to enter a msg (if u don't write msg hen commit will be
abbort) then press Esc+':wq' to go out.
  OR
  git commit -m 'msg' //to commit changes in .git folder

- git status //everything is committed and use git push to publish local commits.

- git restore --staged newFile //nothing is there in staging area

(if want to skip staging area then write git commit -a -m 'msg', it will commit all the files with msg, msg
is compulsory to write)

----------------------------------------------------------------------------------------------
// to set name and mail in git

- git config --global user.name hiral

- git config --global user.email heerrr

// to see that

- git config --global user.name

- git config --global user.email  

// to see all hidden folders and unhidden

- ls -lart

// to create a file 

- touch x.xyz

// to add all files at a time

- git add -A

//u add one file and commit it, then if u loose data of that file then to recover data

- git checkout fileName

//to recover all files

- git checkout -f

//to know what things are committed

- git log

//to see last 5 commits

- git log -p -5

//to compare working directory and staging area

- git diff 

//to compare staging area and last commit

- git diff --staged

//to remove committed file from staging area

- git rm --cached fileName

//to remove committed file from staging area and system 

- git rm fileName

//to see small status

- git status -s

//never want to track files, ignore files

- touch .gitignore

//write fileName which is going to be ignored in this file, if want to ignore all log file, write '*.log', to ignore folder, write 'folderName/'

// to create branch

- git branch branchName

// to see branches

- git branch

// to switch branch

- git checkout branchName

//to merge branches, go to default branch

- git merge branchName

// to make new branch and switch to that branch

- git checkout -b branchName

// to add url with local git

- git remote add origin //url

// to get repo name

- git remote 

// to get repo name with url

- git remote -v

// when you create private repo, you can't push files on github. At that time SSH key is used.

// to unstage all the files 

- git reset HEAD *

- git reset HEAD xyz.xyz

- git reset HEAD~1/2/...

- git reset --mixed HEAD~1 //it affects last commit

- git reset --soft HEAD~2 //it affects last 2 commits 

// to discard changes in working directory

- git restore fileName

//Reverting undoes a commit by creating a new commit. 

- git revert HEAD~2

// the rebase command integrates changes from one branch into another. It is an alternative to the better known "merge" command. Most visibly, rebase differs from merge by rewriting the commit history in order to produce a straight, linear succession of commits.


==>> git squash commit, git log,hard/mix/soft, revert,rebase, restore, set, fork, git checkout --fileName, stash, sublime head~1
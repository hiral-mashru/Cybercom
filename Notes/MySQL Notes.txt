** JOIN : -
When we need to select data from more than one table then we can use joins in SQL Server.                   
We can join two or more tables on the basis of common column between these tables.

** INNER JOIN : - 
When we need to select the common data from more than one table then we will use inner join.                               
It will select only those data which will be common in these two tables.                       
- Inner join is the also known as Default join. We can use this join also using JOIN keywords.

** OUTER JOIN : -
When we need to select all data from one table including common data from Second table then                                
we use outer join. It includes NULL value where it does not find data in second column.

** LEFT OUTER JOIN INCLUSIVE: -
When we need to find the all data from left table including common data from right table then we                            
use left outer join.
Ex. select emp_record.eid, emp_record.ename, emp_record.email, emp_sal.salary, emp_sal.ispermanent
from emp_record left outer join emp_sal on emp_record.eid=emp_sal.eid

** LEFT OUTER JOIN EXCLUSIVE : -
When we need to select data only from left table excluding common data from right table then we will                                            
use query in following manner
Ex. select emp.eid, emp.ename, emp.email
from emp_record emp left outer join emp_sal es on emp.eid=es.eid where es.salary is null

** RIGHT OUTER JOIN INCLUSIVE : -
When we need to find the all data from right table including common data from left table then we use                                     
right outer join.
EX. select emp.eid, emp.ename, emp.email, es.salary, es.ispermanent
from emp_sal es right outer join  emp_record emp on emp.eid=es.eid

** RIGHT OUTER JOIN EXCLUSIVE : -
When we need to select data only from right table excluding common data from left table then we will                            
use query in following manner
Ex. select emp.eid, emp.ename, emp.email
from emp_record emp right outer join emp_sal es on emp.eid=es.eid where es.salary is null

** FULL OUTER JOIN : - 
When we need to select all data from all tables whether it is common or uncommon then we use full outer join.
Ex. select emp.eid, emp.ename, emp.email, es.salary, es.ispermanent
from Emp_Record emp full outer join  emp_sal es on emp.eid=es.eid

** CROSS JOIN : -
Cross join is used to find Cartesian product between two tables. It will simply joins each row from one table                                         
to each row in second tables. In genral language we will say it will multiply each row of first table with each                                         
row of second table. We need not to implement any key column in cross join.
Ex. select emp.eid, emp.ename, emp.email, es.salary, es.ispermanent
from Emp_Record emp cross join  emp_sal es

** SELF JOIN : -
When we need to join a table with itself then it is known as Self join. We joins same table by creating their alias.                      
Self-join is not any keyword. We use existing joins in self-join but difference is that we use only one table.
Ex. select distinct e.eid, e.ename, e.email
from Emp_data e inner join Emp_data ed on e.eid=ed.emphead


** NATURAL JOIN : -
A Natural Join is where 2 tables are joined on the basis of all common columns.
EX: SELECT location_id, street_address, city, state_province, country_name FROM locations NATURAL JOIN countries; 

** HAVING : - 
A HAVING clause in SQL specifies that an SQL SELECT statement must only return rows where aggregate values meet the specified               
conditions. After the aggregating operation, HAVING is applied, filtering out the rows that don't match the specified conditions.

** INNER JOIN : -
A Inner Join is where 2 tables are joined on the basis of common columns mentioned in the ON clause.
EX: SELECT location_id, street_address, city, state_province, country_name FROM locations JOIN countries  USING (country_id); OR
    SELECT first_name, last_name, departments.department_id, department_name from employees INNER JOIN departments ON         
       employees.department_id = departments.department_id;

The difference is in natural join no need to specify condition but in inner join condition is obligatory.

Here's a list of equivalent syntaxes:

A LEFT JOIN B            A LEFT OUTER JOIN B
A RIGHT JOIN B           A RIGHT OUTER JOIN B
A FULL JOIN B            A FULL OUTER JOIN B
A INNER JOIN B           A JOIN B

** A primary key of one table can be referenced by foreign key of another table. Unique key constraints
also identifies an individual tuple uniquely in a relation or table. A table can have more than one 
unique key unlike primary key. Unique key constraints can accept only one NULL value for column.
a primary key column doesn't accept null values, while unique key columns can contain one null value 
each. And finally, the primary key column has a unique clustered index while a unique key column has a
unique non-clustered index.
Foreign keys do not create indexes. Only alternate key constraints(UNIQUE) and primary key constraints 
create indexes. This is true in Oracle and SQL Server.

A foreign key containing null values cannot match the values of a parent key, since a parent key by 
definition can have no null values. However, a null foreign key value is always valid, regardless of the 
value of any of its non-null parts. ... A foreign key value is null if any part is null.

The DROP TABLE statement is used to drop an existing table in a database.
DROP TABLE table_name;

The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.
TRUNCATE TABLE table_name;

The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
The ALTER TABLE statement is also used to add and drop various constraints on an existing table.
ALTER TABLE Customers
ADD Email varchar(255);

To change the data type of a column in a table, use the following syntax:

SQL Server / MS Access:
ALTER TABLE table_name
ALTER COLUMN column_name datatype;

My SQL / Oracle (prior version 10G):
ALTER TABLE table_name
MODIFY COLUMN column_name datatype;

Oracle 10G and later:
ALTER TABLE table_name
MODIFY column_name datatype;

ALTER TABLE Persons
DROP COLUMN DateOfBirth;

** LIMIT : -
The limit keyword is used to limit the number of rows returned in a query result. ... "LIMIT N" is the 
keyword and N is any number starting from 0, putting 0 as the limit does not return any records in the 
query.

** 1 NF: -
one column should have one value and of same type, column should have a unique name, order doesn't matter.

** 2 NF : -
should have 1 NF, and should not have partial dependancy.
Dependancy :  when, to retrieve a value(row), we need to use primary key..that's called dependancy.
Partial dependancy : when a column depends on half primary key of composite primary keys.
Ex.: scoreId(primary key), studentId, subjectId(foreign keys - composite primary keys - prime attributes), subjectTeacher
 (non prime attribute) -> subjectTeacher depends on subjectId (half primary key) -> To remove that, add subjectTeacher to subject table

** 3 NF : -
should have 2 NF, and should not have transitive dependancy.
Transitive dependancy : when one column is dependent on non-prime attribute.
Ex: scoreId(primary key), studentId, subjectId(foreign keys - composite primary keys - prime attributes),examName (non-prime attribute), totalMarks->  examName(practical, sessional, theory, engg field vise different) depends on subjectId 
and studentId , totalMarks depends on examName. - > to remove that, make different table with columns of examname, total
marks

** BCNF : - boyce-codd
should have 3 NF, and for dependancy A->B, A should be super key. A is not prime attribute, B is prime attribute.

** 4NF : - 
should be in BCNF, should not have multi-valued dependency

** 5NF :- (PJNF)- Project join
should be in 4NF, should not have join dependency.

** super key:- combinations of all keys in table. Ex. A,B,C are keys. (A,B,C,A+B,B+C,A+c,A+B+C) are super keys.
** candidate key:- minimal subset of super key. In above example: A,B,C are candidate keys. coz A+B,B+C,A+c,A+B+C behave like super key, so they are not candidate key.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

- when u use 'using' keyword, must use () after that.
- when u use multiple joins in one statement, must use ON keyword, not USING.
- LIKE for matching a string and IN for matching numbers used in WHERE statement.
- <> = NOT LIKE


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
EX: https://www.w3resource.com/mysql-exercises/join-exercises/#PracticeOnline

select employees.first_name, employees.last_name, employees.job_id, departments.department_id, departments.department_name                        
from employees INNER JOIN departments ON employees.department_id = departments.department_id INNER JOIN locations ON                                 
locations.location_id = departments.location_id where LOWER(locations.city) = 'London';

select e.employee_id, e.last_name, e.manager_id, em.last_name  from employees e JOIN employees em ON e.manager_id = em.manager_id;

select e.first_name, e.last_name, e.hire_date from employees e JOIN employees em ON em.last_name= 'Jones' WHERE em.hire_date < e.hire_date;

select d.department_name, count(e.employee_id) from employees e join departments d ON e.department_id = d.department_id GROUP BY                        
e.department_id ORDER BY d.department_name; 

select e.employee_id, j.job_title, e.end_date-e.start_date from job_history e join jobs j using (job_id) where e.department_id=90;

select d.department_id, d.department_name, d.manager_id, e.first_name from departments d join employees e on d.manager_id = e.employee_id;

select d.department_name, e.first_name, l.city from departments d join employees e ON (e.employee_id = d.manager_id) join locations l using (location_id)

select e.job_id, avg(e.salary) from employees e group by e.job_id 

select j.job_title, e.first_name, e.salary-j.min_salary from employees e join jobs j using (job_id)

select j.* from job_history j JOIN employees e using (employee_id) where e.salary>10000;

select d.department_name, e.first_name, e.last_name, e.hire_date, e.salary from employees join departments on e.manager_id=d.employee_id where datediff(now(),e.hire_date)/365 > 15


Ex. https://www.w3resource.com/mysql-exercises/subquery-exercises/index.php#PracticeOnline

select e.first_name,e.last_name, e.salary from employees e join employees em on em.last_name = 'Bull' where e.salary > em.salary;

EX. https://www.w3resource.com/sql-exercises/sql-joins-exercises.php#SQLEDITOR

select s.name, c.cust_name from salesman s join customer c using (city)

select o.ord_no, o.purch_amt, c.cust_name, c.city from orders o join customer c using (customer_id) where purch_amt <2000 AND purch_amt >500;

select c.cust_name, s.name from customer c join salesman s using (salesman_id);

select c.cust_name, c.city, s.commission from customer c join salesman s using (salesman_id) where s.commission > 0.12;

select c.cust_name, c.city,s.city, s.commission from customer c join salesman s using (salesman_id) where s.commission > 0.12 AND s.city NOT LIKE c.city;

select o.ord_no, o.ord_date, o.purch_amt, s.commission from orders o natural join customer c join salesman s on c.salesman_id=s.salesman_id;

select * from orders natural join customer natural join salesman;

select c.cust_name, c.city, c.grade, s.name from customer c left join salesman s on (c.salesman_id = s.salesman_id) order by c.customer_id;

select c.cust_name, c.city, c.grade, s.name from customer c left outer join salesman s on (c.salesman_id = s.salesman_id) where c.grade < 300 order by c.customer_id;

select c.cust_name, c.city, o.ord_no,o.ord_date, o.purch_amt from orders o right join customer c using (customer_id) order by o.ord_date; 

select c.cust_name, c.city, o.ord_no,o.ord_date, o.purch_amt, s.name, s.commission from orders o right join customer c using (customer_id) join salesman s on (c.salesman_id = s.salesman_id) order by o.ord_date; 

select a.cust_name,a.city,a.grade, s.name, s.city, s.commission from salesman s left join customer a using (salesman_id) order by s.salesman_id;

13) select c.cust_name, c.city, c.grade, o.ord_date, o.ord_no, o.purch_amt from salesman s left join customer c using (salesman_id) left join orders o using (customer_id);

14) select c.cust_name,c.city,c.grade,s.name, s.city, o.ord_no, o.ord_date, o.purch_amt  
from customer c 
right join salesman s 
on (c.salesman_id=s.salesman_id) 
left join orders o 
on o.customer_id=c.customer_id 
where o.purch_amt >= 2000
AND c.grade IS NOT NULL;

15) select c.cust_name, c.city, o.ord_no, o.ord_date,o.purch_amt from customer c full outer join orders o using (customer_id);

16) select c.cust_name, c.city, o.ord_no, o.ord_date,o.purch_amt from customer c full outer join orders o using (customer_id) where c.grade IS NOT NULL;

17) select * from salesman cross join customer

18) select * from salesman cross join customer where salesman.city IS NOT NULL

19) select * from salesman s cross join customer c where s.city IS NOT NULL AND c.grade IS NOT NULL

20) select * from salesman s cross join customer c where s.city IS NOT NULL AND c.grade IS NOT NULL AND c.city NOT LIKE s.city 

21) select i.*, c.com_name from item_mast i join company_mast c ON i.pro_com=c.com_id 

22) select i.pro_name, i.pro_price, c.com_name from item_mast i join company_mast c on i.pro_com = c.com_id 

23) select c.com_name, avg(i.pro_price) from company_mast c join item_mast i on i.pro_com=c.com_id group by i.pro_com

*24) select c.com_name, avg(i.pro_price) from company_mast c join item_mast i on i.pro_com=c.com_id group by i.pro_com having avg(i.pro_price) >= 350

25) SELECT c.com_name, i.pro_name, i.pro_price FROM company_mast c JOIN item_mast i ON i.pro_com = c.com_id AND i.pro_price = (SELECT MAX(i.pro_price) FROM item_mast i WHERE i.pro_com=c.com_id)

26) select * from emp_details e join emp_department ed on e.emp_dept=ed.dpt_code 

27) select e.emp_fname,e.emp_lname, ed.dpt_name,ed.dpt_allotment from emp_details e join emp_department ed on e.emp_dept=ed.dpt_code 

28) select e.emp_fname,e.emp_lname, ed.dpt_name,ed.dpt_allotment from emp_details e join emp_department ed on e.emp_dept=ed.dpt_code AND/where ed.dpt_allotment > 50000 

29) select ed.dpt_name from emp_department ed join emp_details e on e.emp_dept=ed.dpt_code group by ed.dpt_name having count(e.emp_dept) > 2






















